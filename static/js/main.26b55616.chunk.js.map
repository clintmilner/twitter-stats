{"version":3,"sources":["components/HighchartsWrapper.js","TwitterStats.js","index.js"],"names":["HighchartsWrapper","props","state","data","Object","keys","filter","key","idx","title","dataArr","map","row","val","name","this","options","text","legend","enabled","chart","backgroundColor","type","xAxis","labels","formatter","moment","x","format","yAxis","min","plotOptions","series","fillColor","linearGradient","stops","Highcharts","Color","setOpacity","get","marker","credits","marshallData","highcharts","React","Component","Container","styled","div","Header","header","Title","h1","Main","main","Panel","Table","table","Footer","footer","TwitterStats","twitterTweetCount","twitterLikeCount","twitterFollowerCount","twitterFollowingCount","fetch","then","json","setState","catch","e","console","error","length","timestamp","toLocaleString","className","renderTable","role","aria-label","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26b55616.chunk.js","sourcesContent":["import React from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport moment from \"moment\";\n\nexport default class HighchartsWrapper extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    marshallData(data) {\n        const [title] = Object.keys(data[0]).filter((key, idx) => (idx === 0)),\n            dataArr = data.map((row) => {\n                const val = row[title],\n                    time = row['timestamp'];\n                return [time, val];\n            });\n        return [{\n            name: title,\n            data: dataArr\n        }];\n    }\n\n    render() {\n        const {data = [], title} = this.props,\n            options = {\n                title: {\n                    text: title\n                },\n                legend: {\n                    enabled: false\n                },\n                chart: {\n                    backgroundColor: '#31333c',\n                    type: 'areaspline'\n                },\n                xAxis: {\n                    type: 'datetime',\n                    labels: {\n                        formatter: function () {\n                            return moment(this.x).format('MMM Do, h:mm:ss a')\n                        }\n                    },\n                    title: {\n                        text: null\n                    }\n                },\n                yAxis: {\n                    title: {\n                        text: title\n                    },\n                    min: 0\n                },\n                plotOptions: {\n                    series: {\n                        fillColor: {\n                            linearGradient: [0, 0, 0, 300],\n                            stops: [\n                                [0, Highcharts.Color('#fff').setOpacity(0.3).get('rgba')],\n                                [1, Highcharts.Color('#fff').setOpacity(0).get('rgba')]\n                            ]\n                        },\n                        marker: {\n                            enabled: true\n                        }\n                    }\n                },\n                credits: {\n                    enabled: false\n                },\n                series: this.marshallData(data)\n            };\n        return (\n            <HighchartsReact\n                highcharts={Highcharts}\n                options={options}\n            />\n        );\n    }\n}","import React from 'react';\nimport styled from 'styled-components';\nimport moment from \"moment\";\nimport HighchartsWrapper from \"./components/HighchartsWrapper\";\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst Header = styled.header`\n    height: 3em;\n    margin-bottom: 30px;\n    border-bottom: 1px solid #585858;\n    padding: 0 2em;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n`;\nconst Title = styled.h1`\n  font-size: 1.5em;\n  margin: 0 auto;\n`;\nconst Main = styled.main`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: flex-start;\n`;\nconst Panel = styled.div`\n    border: 1px solid #2E3039;\n    -webkit-border-radius: 4px; -moz-border-radius: 4px;border-radius: 4px;\n    height: auto;\n    width: calc(50% - 20px);\n    padding: 10px;\n    margin: 10px;\n    box-sizing: border-box;\n    @media (max-width: 768px) {\n        //flex-direction: column;\n        width: calc(100% - 20px);\n  }\n`;\nconst Table = styled.table`\n    width: 100%;\n    font-size: smaller;\n    border: 1px solid #2e3039;\n    th, td {\n        border: 1px solid #2e3039;\n    }\n    td:last-child {\n        text-align: center;\n    }\n`;\nconst Footer = styled.footer`\n    background: #282c34;\n    border-top: 1px solid #585858;\n    margin-top: 30px;\n    height: 50px;\n    display: flex;\n    flex-direction: column;\n    p {\n        text-align: center;\n        margin: auto;\n    }\n`;\n\nexport default class TwitterStats extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            twitterTweetCount: [],\n            twitterLikeCount: [],\n            twitterFollowerCount: [],\n            twitterFollowingCount: []\n        };\n    }\n\n    componentDidMount() {\n        fetch('//scraper.clintmilner.com:9999/data')\n            .then((data) => (data.json()))\n            .then((json) => {\n                this.setState(() => ({...json}));\n            }).catch((e) => console.error('ERROR: ', e));\n    }\n\n    renderTable(key) {\n        const data = this.state[key];\n        if (data && data.length > 0) {\n            return (\n                <Table>\n                    <thead>\n                    <tr>\n                        <th>Date</th>\n                        <th>Count</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {\n                        data.filter((row, idx) => (data.length <=5 || data.length - idx <= 5))\n                            .map((row, idx) => {\n                            return (\n                                <tr key={idx}>\n                                    <td>{moment(row.timestamp).format('MMM Do YYYY, h:mm:ss a')}</td>\n                                    <td>{row[key].toLocaleString()}</td>\n                                </tr>\n                            );\n                        })\n                    }\n                    </tbody>\n                </Table>\n            );\n        }\n\n    }\n\n    render() {\n        const {twitterTweetCount, twitterFollowerCount, twitterFollowingCount, twitterLikeCount} = this.state;\n        return (\n            <Container>\n                <Header>\n                    <Title>Twitter Stats</Title>\n                </Header>\n                <Main>\n                    {\n                        (twitterTweetCount && twitterTweetCount.length > 0)\n                            ? <Panel>\n                                <h2>Tweet Count</h2>\n                                <div className=\"graph\"><HighchartsWrapper data={twitterTweetCount} /></div>\n                                <div className=\"table\">{this.renderTable('twitterTweetCount')}</div>\n                            </Panel>\n                            : null\n                    }\n                    {\n                        (twitterFollowerCount && twitterFollowerCount.length > 0)\n                            ? <Panel>\n                                <h2>Follower Count</h2>\n                                <div className=\"graph\"><HighchartsWrapper data={twitterFollowerCount} /></div>\n                                <div className=\"table\">{this.renderTable('twitterFollowerCount')}</div>\n                            </Panel>\n                            : null\n                    }\n                    {\n                        (twitterFollowingCount && twitterFollowingCount.length > 0)\n                            ? <Panel>\n                                <h2>Following Count</h2>\n                                <div className=\"graph\"><HighchartsWrapper data={twitterFollowingCount} /></div>\n                                <div className=\"table\">{this.renderTable('twitterFollowingCount')}</div>\n                            </Panel>\n                            : null\n                    }\n                    {\n                        (twitterLikeCount && twitterLikeCount.length > 0)\n                            ? <Panel>\n                                <h2>Like Count</h2>\n                                <div className=\"graph\"><HighchartsWrapper data={twitterLikeCount} /></div>\n                                <div className=\"table\">{this.renderTable('twitterLikeCount')}</div>\n                            </Panel>\n                            : null\n                    }\n\n                </Main>\n                <Footer>\n                    <p>Made with <span role='img' aria-label='love'>❤️</span> by @clint_milner</p>\n                </Footer>\n            </Container>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport './index.css';\nimport TwitterStats from \"./TwitterStats\";\n\nReactDOM.render(<TwitterStats />, document.getElementById('root'));"],"sourceRoot":""}